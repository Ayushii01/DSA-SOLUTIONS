class MyCircularQueue {
    
    int front, rear, size;
    unsigned capacity;
    int *arr;
    
public:
    
    MyCircularQueue(int k) {
        capacity = k;        
		size = 0;              
        front = 0;
        rear = capacity-1;
        arr = new int[capacity];
    }
    
    bool enQueue(int value) {
        if(isFull())
            return false;
        rear = (rear+1)%capacity;
        arr[rear] = value;
        size++;      
        return true;      
    }
    
    bool deQueue() {
        if(isEmpty())
            return false;
        front = (front+1)%capacity;
        size--;     
        
        return true;     
    }
    
    int Front() {
        if(isEmpty())
            return -1;
        
        return (arr[front]);
    }
    
    int Rear() {
        if(isEmpty())
            return -1;
        
        return (arr[rear]);
    }
    
    bool isEmpty() {
        return (size == 0);
    }
    
    bool isFull() {
        return (size == capacity);
    }
};
